rustflags = [
    # LLD (shipped with the Rust toolchain) is used as the default linker
    "-C", "link-arg=-Tlink.x",

    # if you run into problems with LLD switch to the GNU linker by commenting out
    # this line
    # "-C", "linker=arm-none-eabi-ld",

    # if you need to link to pre-compiled C libraries provided by a C toolchain
    # use GCC as the linker by commenting out both lines above and then
    # uncommenting the three lines below
    # "-C", "linker=arm-none-eabi-gcc",
    # "-C", "link-arg=-Wl,-Tlink.x",
    # "-C", "link-arg=-nostartfiles",

    # uncomment for unchecked wrapping arithmetics also in dev mode
    # "-Z", "force-overflow-checks=off",
    # This lets us see if we run out of memory by giving a stack overflow
    # message on the debugger rather than siliently hanging:
    "-C", "linker=flip-link",
    "-Z", "trap-unreachable=no",
    "-C", "inline-threshold=5",
    "-C", "no-vectorize-loops",
]

[build]
# Pick ONE of these compilation targets
# target = "thumbv6m-none-eabi"    # Cortex-M0 and Cortex-M0+
# target = "thumbv7m-none-eabi"    # Cortex-M3
#target = "thumbv7em-none-eabi"   # Cortex-M4 and Cortex-M7 (no FPU)
target = "thumbv7em-none-eabihf" # Cortex-M4F and Cortex-M7F (with FPU)
# target = "thumbv7em-none-eabi"

[unstable]
build-std = ["core"]
build-std-features = ["panic_immediate_abort"]